<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置spring的IOC,把service对象配置进来-->
    <bean id="accountService" class="service.impl.AccountServiceImpl"></bean>
    <!-- Spring中基于xml的配置步骤
        1.把通知Bean也交给spring来管理
        2、使用aop:config标签表明开始AOP的配置
        3、使用aop:aspect标签表明配置切面
        　　　　id属性：是给切面提供一个唯一标识
        　　　　ref属性：是指定通知类bean的Id。
        4、在aop:aspect标签的内部使用对应标签来配置通知的类型
        　　aop:before：表示配置前置通知
        　　　　method属性：用于指定Logger类中哪个方法是前置通知
        　　　　ponitcut-ref：用于指定切入点的表达式的引用
        　　　　poinitcut：用于指定切入点表达式
        　　aop:after-returning: 后置通知：在切入点方法正常执行之后执行，它和异常通知永远只能执行一个
        　　aop:after-throwing: 异常通知：在切入点方法执行产生异常后执行。他和后置通知永远只能执行一个
        　　aop:after: 最终通知，无论切入点方法是否正常执行它都会在其后面执行
        aop:around: 环绕通知 详细的注释在Logger类中，通常情况下，环绕通知都是独立使用的

        切入点表达式的写法：
        关键字：execution(表达式)
        表达式：访问修饰符 返回值 包名.包名..包名.类名.方法名(参数列表)
        标准表达式写法：pointcut="execution(public void service.impl.AccountServiceImpl.saveAccount())"
        访问修饰符可以省略：void service.impl.AccountServiceImpl.saveAccount()
        返回值可以用*，表示任意返回值：* service.impl.AccountServiceImpl.saveAccount()
        包名可以使用通配符，表示任意包。但是有几级包，就需要写几个* : * *.*.AccountServiceImpl.saveAccount()
        包名可以使用..表示当前包及其子包: * *..AccountServiceImpl.saveAccount()
        类名和方法名都可以使用*实现通配: * *..*.*()
        参数列表：
            可以直接写数据类型：
                基本类型直接写名称    int  * *..*.*(int)
                应用类型写包名.类名的方式  java.lang.String
                可以使用通配符*表示任意类型，但方法必须有参数
                可以使用..表示，有无参数均可，有参数表示任意类型 * *..*.*(..)
        全通配写法:* *..*.*(..)
        实际开发中：切到业务层实现类下的所有方法 * service.impl..*.*(..)
    -->

    <!--配置Logger类-->
    <bean id="logger" class="utils.Logger"></bean>
    <!--配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logService" ref="logger">
<!--            &lt;!&ndash;配置通知的类型，并且建立通知方法和切入点方法的关联&ndash;&gt;-->
<!--            &lt;!&ndash; 配置前置通知: 对saveAccount方法增强（before:printLog在saveAccount方法增强前执行） 在切入点方法执行之前执行&ndash;&gt;-->
<!--           <aop:before method="beforePrintLog" pointcut="execution(public void service.impl.AccountServiceImpl.saveAccount(..))"></aop:before>-->
<!--            &lt;!&ndash;后置通知  在切入点方法正常执行之后执行 它和异常通知只能执行一个&ndash;&gt;-->
<!--           <aop:after-returning method="afterPrintLog" pointcut="execution(public void service.impl.*.*(..))"></aop:after-returning>-->
<!--            &lt;!&ndash;异常通知 在切入点方法执行产生异常后执行 它和后置通知只能执行一个&ndash;&gt;-->
<!--            <aop:after-throwing method="afterThrowingPrintLog" pointcut="execution(public void service.impl.*.*(..))"></aop:after-throwing>-->
<!--            &lt;!&ndash;最终通知 在切入点方法是否正常执行，它都会在其后面执行&ndash;&gt;-->
<!--            <aop:after method="finalPrintLog" pointcut="execution(public void service.impl.*.*(..))"></aop:after>-->
            <!--环绕通知 详细注释看Logger类中-->
            <aop:around method="aroundPrintLog" pointcut="execution(public void service.impl.*.*(..))"></aop:around>
       </aop:aspect>

   </aop:config>
</beans>