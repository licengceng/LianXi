<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">


    <!--开启注解扫描-->
    <context:component-scan base-package="controller"></context:component-scan>

    <!--视图解析器对象-->
    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!--配置拦截器-->   <!--如果过去先执行拦截器1再到2再到controller方法，那么controller方法回来先执行拦截器2代码再到拦截器1-->
    <mvc:interceptors>

        <mvc:interceptor>
            <!--要拦截的具体方法-->
            <mvc:mapping path="/user/*"/>    <!--不要拦截的具体方法--><!-- <mvc:exclude-mapping path=""/>-->
            <!--配置拦截器对象-->
            <bean class="interceptor.Myinterceptor1" />
        </mvc:interceptor>

        <mvc:interceptor>
            <!--要拦截的具体方法-->
            <mvc:mapping path="/**"/>   <!--  /**拦截所有资源   -->
            <!--配置拦截器对象-->
            <bean class="interceptor.Myinterceptor2" />
        </mvc:interceptor>

    </mvc:interceptors>

    <!--前端控制器，那些静态资源不拦截-->
    <mvc:resources location="/js/" mapping="/js/**"/> <!--该路径下的所有资源都不会被拦截-->
    <!--配置文件解析器对象  注： id是固定的，否则无法实现请求参数绑定-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760" />
    </bean>


    <!--开启springmvc注解的支持-->
    <mvc:annotation-driven conversion-service="ConversionService" />

    <!--自定义类型转换器-->
    <bean id="ConversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters"> <!--注入-->
            <set>
                <bean class="utils.StringToDateConverter" />
            </set>
        </property>
    </bean>
</beans>